{"artefact": "golang-project-repository-commit", "repository": {"username": "fsnotify", "project": "fsnotify", "provider": "github"}, "author": "Aaron L <aaron@bettercoder.net>", "cdate": 1490785602, "adate": 1490761267, "commit": "4da3e2cfbabc9f751898f250b49f2439785783a1", "message": "Fix deadlock in Remove (linux/inotify)\n\nSeveral people have reported this issue where if you are using a\nsingle goroutine to watch for fs events and you call Remove in\nthat goroutine it can deadlock. The cause for this is that the Remove\nwas made synchronous by PR #73. The reason for this was to try and\nensure that maps were no longer leaking.\n\nIn this PR: IN_IGNORE was used as the event to ensure map cleanup.\nThis worked fine when Remove() was called and the next event was\nIN_IGNORE, but when a different event was received the main goroutine\nthat's supposed to be reading from the Events channel would be stuck\nwaiting for the sync.Cond, which would never be hit because the select\nwould then block waiting for someone to receive the non-IN_IGNORE event\nfrom the channel so it could proceed to process the IN_IGNORE event that\nwas waiting in the queue. Deadlock :)\n\nRemoving the synchronization then created two nasty races where Remove\nfollowed by Remove would error unnecessarily, and one where Remove\nfollowed by an Add could result in the maps being cleaned up AFTER the\nAdd call which means the inotify watch is active, but our maps don't\nhave the values anymore. It then becomes impossible to delete the\nwatches via the fsnotify code since it checks it's local data before\ncalling InotifyRemove.\n\nThis code attempts to use IN_DELETE_SELF as a means to know when a watch\nwas deleted as part of an unlink(). That means that we didn't delete the\nwatch via the fsnotify lib and we should clean up our maps since that\nwatch no longer exists. This allows us to clean up the maps immediately\nwhen calling Remove since we no longer try to synchronize cleanup\nusing IN_IGNORE as the sync point.\n\n- Fix #195\n- Fix #123\n- Fix #115\n"}