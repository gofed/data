{"artefact": "golang-project-repository-commit", "repository": {"username": "spf13", "project": "afero", "provider": "github"}, "author": "Jamie Wilkinson <jaq@spacepants.org>", "cdate": 1474318874, "adate": 1474318874, "commit": "52e4a6cfac46163658bd4f123c49b6ee7dc75f78", "message": "Fixes a pass-by-value error in FileData.Name()\n\nFixes a pass-by-value error in FileData.Name() which causes the mutex to be copied, and use that method to retrieve the name of the file from a mem.File.  This really fixes the data race that motivated PR #95. (#96)\r\n\r\nI can't explain why moving the lock improves the situation, nor why calling through the accessor Name() instead of locking and reading f.fileData.name is not the same, but go vet indicates that the mutex in fileData was being copied, not preserved.\r\n\r\nThe reproducing test case upstream is:\r\ncheck out github.com/google/mtail\r\nmake install_deps\r\ngo test -race -timeout 1m -v -run TestProcessEvents --count=10000 ./vm\r\n\r\nPrior to this change, the test reports a data race 3 times out of 10000, after, 0 times consistently."}